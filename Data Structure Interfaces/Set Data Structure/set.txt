/*
A set is a data structure than has four basic operations: 
Items can be added, 
items can be removed, 
a “contains" method can verify an item’s existence, 
and the set can return a list of it’s items.
*/

/*
We're going to quickly run through what some of the standard interfaces with data structures are. 
When I say interface, I mean that you, as a consumer of that data structure, actually don't know how it works underneath; you just know that it works in a certain way. 
It's a black box to you in that sense. 
We'll later go over several ways to implement these later.

In any case, a set is pretty simple. 
You'll also hear them called collections depending which language you're working with. 
A set allows allows at least four things: add, remove, contains, and toList. 
The basic idea is that you can add items to a set and then later check if they're there. 
You can also request later a list of those items in the set (though with no guaranteed order; sets have no notion of order.) 
They're also useful for deduplication since you can only add something to a set once.
*/

// a set is not a list
// a set is more of an object
// a set has no duplicates